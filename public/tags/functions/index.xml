<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functions on Javascript Standards</title>
    <link>http://bguiz.github.io/js-standards/tags/functions/</link>
    <description>Recent content in Functions on Javascript Standards</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 02 Jan 2015 11:15:48 +0800</lastBuildDate>
    <atom:link href="http://bguiz.github.io/js-standards/tags/functions/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ES5 Functions</title>
      <link>http://bguiz.github.io/js-standards/es5/functions/</link>
      <pubDate>Fri, 02 Jan 2015 11:15:48 +0800</pubDate>
      
      <guid>http://bguiz.github.io/js-standards/es5/functions/</guid>
      <description>

&lt;h3 id=&#34;anonymous-and-named-functions:904d9cf85d985550c869e6d9741448cc&#34;&gt;Anonymous and named functions&lt;/h3&gt;

&lt;p&gt;Anonymous function are functions without a name,
and named function are those with a name.
Note, however, that assigning an anonymous function to a variable
does &lt;em&gt;not&lt;/em&gt; make that function a named function.
A function&amp;rsquo;s name is the word in between the &lt;code&gt;function&lt;/code&gt; keyword, and its parameter list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function namedFunction() {
	/* this is a named function, and its name is &amp;quot;namedFunction&amp;quot; */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function () {
	/* This is an anonymous function, and it does not have a name */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var namedFunctionReference = function () {
	/* This is an anonymous function, and it does not have a name
	   &amp;quot;namedFunctionReference&amp;quot; is *not* its name.
	*/
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For anonymous functions, include a space between the &lt;code&gt;function&lt;/code&gt; keyword and the parameter list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function (param, param2) {
	/* do stuff */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For named functions, do not include a space between the function name and the parameter list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function doStuff(param, param2) {
	/* do stuff */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;trailing-semicolons:904d9cf85d985550c869e6d9741448cc&#34;&gt;Trailing semicolons&lt;/h3&gt;

&lt;p&gt;For functions assigned to variables, place a &lt;code&gt;;&lt;/code&gt; after the closing &lt;code&gt;}&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var doStuff = function (param, param2) {
	/* do stuff */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For functions that are &lt;em&gt;not&lt;/em&gt; assigned to variables, do &lt;em&gt;not&lt;/em&gt; place a &lt;code&gt;;&lt;/code&gt; after the closing &lt;code&gt;}&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function doStuff(param, param2) {
	/* do stuff */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;avoid-anonymous-functions:904d9cf85d985550c869e6d9741448cc&#34;&gt;Avoid Anonymous Functions&lt;/h3&gt;

&lt;p&gt;While anonymous functions might be a convenient way to save an extra few keystrokes,
it is advisable to name all but the most trivial of functions,
for these reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Self documenting code: It is a good idea to give your functions descriptive names&lt;/li&gt;
&lt;li&gt;Stack traces: When an error or exception is raised in the scope of the function,l
the function&amp;rsquo;s name will be displayed in the stack trace.
If that function is anonymous, however, its name does &lt;strong&gt;not&lt;/strong&gt; get displayed,
even where the function was assigned to a variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For these reasons, we should strive to avoid using anonymous functions.
By extension of this logic, assigning an anonymous function to a variable is,
therefore, considered an antipattern.
If you find yourself doing this, simply name the function
the same as the name of the variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Avoid doing this ...
var doesFoo = function() {
  /* do foo */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// ... and do this instead
var doesFoo = function doesFoo() {
  /* do foo */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this seems repetitive, another alternative:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// ... simply define a function
function doesFoo() {
  /* do foo */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The more astute might point out that the last form is less desirable,
as that will mean that the function, &lt;code&gt;doesFoo&lt;/code&gt;, will pollute the global scope.&lt;/p&gt;

&lt;p&gt;That is indeed true in the default scope, however,
if placed within an outer function,
the scope will be restricted to within just that outer function.
This gives us an excellent segue to IIFEs!&lt;/p&gt;

&lt;p&gt;Before discussing IIFEs, however,
it is worth pointing out that IIFEs should only be used when necessary.
If the platform that you are developing for automatically restricts scope
for each file, such as with NodeJs, then there is no need.
If you are using a build tool such as RequireJs, Browserify, or Webpack,
then there is similarly no need either.
If you are not using any of the above,
writing Javascript executed in the browser,
then consider using IIFEs.&lt;/p&gt;

&lt;h3 id=&#34;iifes:904d9cf85d985550c869e6d9741448cc&#34;&gt;IIFEs&lt;/h3&gt;

&lt;p&gt;Immediately invoked function expressions (IIFEs)
are anonymous functions that are surrounded by parentheses,
and called as soon as they are declared;
and thus by definition can only ever be called once:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;(function (param, param2) {
	/* do stuff */
})(&#39;param&#39;, 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where possible, avoid using IIFEs.
As a rule of thumb, if it can be done without using an IIFE, use that other approach instead.
Legitimate uses of IIFEs would be scenarios where there is a need to contain code from &amp;ldquo;leaking&amp;rdquo; out,
and there is no way to know ahead of time what the input code will be
For example, when one is writing a tool or pre-processor that outputs generated or transformed code.&lt;/p&gt;

&lt;h3 id=&#34;function-hoisting:904d9cf85d985550c869e6d9741448cc&#34;&gt;Function hoisting&lt;/h3&gt;

&lt;p&gt;Hoisting was covered in detail previously,
however, it was done in terms of hoisting of variable declarations.
Hoisting of function declarations works in very much the same way.
This is most pertinent when considering &lt;strong&gt;inner functions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Inner functions are functions that are declared within another function.
In this scenario, variables within the scope of the outer function
are made available for use within the inner function by means of closure.
Thus, following the guidelines for variable declarations at the top of each function,
inner functions should always be declared at the top of each function too,
but immediately below these variable declarations for clarity.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var outerFunction = function () {
	var variableAvailableThroughClosure = 1;

	var innerFunction = function () {
		++variableAvailableThroughClosure;
	}

	innerFunction();
	console.log(&#39;variableAvailableThroughClosure is&#39;, variableAvailableThroughClosure);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sequence should be:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All variable declarations&lt;/li&gt;
&lt;li&gt;All inner function declarations&lt;/li&gt;
&lt;li&gt;Outer function instructions&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;pyramid-of-doom:904d9cf85d985550c869e6d9741448cc&#34;&gt;Pyramid of Doom&lt;/h3&gt;

&lt;p&gt;Also known as Callback Hell.
This occurs when functions next other callback functions within each other,
one time too many.
After a certain level of nesting, it becomes heard to understand
what the original intent of the code was.
It also makes the code look like it has a triangle/ pyramid on its side doing the indentation.&lt;/p&gt;

&lt;p&gt;Ensure that the maximum level of nesting is &lt;strong&gt;four&lt;/strong&gt; functions.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function foo() {
  bar(123, function() {
    baz(456, function() {
      quux(789, function() {
        // complete
        // But this bad, it is nested five levels deep
      });
    });
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refactor to remove some levels of nesting,
by extracting on of the nested function and placing them outside:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function innerFoo() {
  quux(789, function() {
    // complete
    // This is much better, as this function is only nested two levels deep
  });
}

function foo() {
  bar(123, function() {
    baz(456, innerFoo);
    // ... and this function is only nested three levels deep
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Extracting the functions and placing them outside of their original
containing function is the most basic and straightforward means
of avoiding the pyramid of doom.
There are more advanced ways to solve this problem,
for example, using promises.&lt;/p&gt;

&lt;h4 id=&#34;other-nesting:904d9cf85d985550c869e6d9741448cc&#34;&gt;Other Nesting&lt;/h4&gt;

&lt;p&gt;Apart from nesting of function scope,
in Javascript, it is also possible to nest block scope.
This is undesirable for similar reasons.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function foo() {
  for (var i = 0; i &amp;lt; 10; ++i) {
    if (i &amp;gt; 5) {
      for (var j = 0; j &amp;lt; 10; ++j) {
        if (j &amp;gt; 5) {
          for (var k = 0; k &amp;lt; 10; ++k) {
            // do stuff with `i`, `j`, and `k`
            // This is bad, because this block is nested six levels deep
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a situation like this,
one possible solution is to simply split the innermost blocks into its own function,
and call the function as above.
Another possible solution would be to avoid logic
that requires this level of nesting to begin with -
this level of nesting is indiocative of a need to simplify the program flow logic.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function foo() {
  for (var i = 6; i &amp;lt; 10; ++i) {
    for (var j = 6; j &amp;lt; 10; ++j) {
      for (var k = 0; k &amp;lt; 10; ++k) {
        // do stuff with `i`, `j`, and `k`
        // This is better, because the levels of nesting have decreased
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The - admittedly, contrived - contrived example above can be simplified greatly,
by simply removing all of the &lt;code&gt;if&lt;/code&gt; statements,
and modifyiong the bounds used by the &lt;code&gt;for&lt;/code&gt; loops.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ES5 Naming Conventions</title>
      <link>http://bguiz.github.io/js-standards/es5/naming/</link>
      <pubDate>Wed, 14 Jan 2015 22:13:18 +1100</pubDate>
      
      <guid>http://bguiz.github.io/js-standards/es5/naming/</guid>
      <description>

&lt;h3 id=&#34;case:c71c34a7bb0db96f87def312ae0a673e&#34;&gt;Case&lt;/h3&gt;

&lt;p&gt;Use &lt;strong&gt;camelCase&lt;/strong&gt; when naming variables and functions&lt;/p&gt;

&lt;p&gt;When a function is intended to be called as a constructor function (i.e. with the &lt;code&gt;new&lt;/code&gt; keyword),
use the &lt;strong&gt;PascalCase&lt;/strong&gt; instead.
Pascal case is simply camel case, except that the first letter is capitalised.&lt;/p&gt;

&lt;h3 id=&#34;legal-characters:c71c34a7bb0db96f87def312ae0a673e&#34;&gt;Legal characters&lt;/h3&gt;

&lt;p&gt;Javascript is quite relaxed in which characters it allows in legal variable or function names,
use instead what would be normal variable naming conventions other C-style syntax languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First character can be an alphabet (upper case or lower case)&lt;/li&gt;
&lt;li&gt;Second and subsequent characters can be a digit or an alphabet (upper case or lower case)&lt;/li&gt;
&lt;li&gt;Avoid using &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Avoid any characters with an ASCII code of over 127&lt;/li&gt;
&lt;li&gt;Avoid all Unicode characters&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;abbreviations:c71c34a7bb0db96f87def312ae0a673e&#34;&gt;Abbreviations&lt;/h3&gt;

&lt;p&gt;With the exception of temporary variables,
such as the occasional &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; that you might use as the iterator index in a for loop,
avoid abbreviating or otherwise obfuscating your variable and function names.&lt;/p&gt;

&lt;p&gt;Spell them out in full!
After all, abbreviations are the job for a &lt;strong&gt;minifier&lt;/strong&gt;,
which will minimise the length of all of your Javascript variables anyway!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function a(b) {
  return b.last || bar.first;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is &lt;code&gt;a&lt;/code&gt;?
What is &lt;code&gt;b&lt;/code&gt;?
If you were to look at this in three months time,
would you not wish that you had written this instead?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function selectDefaultName(person) {
  return person.last || person.first;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the same vein, avoid giving ambiguous names to variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instead of &lt;code&gt;pos&lt;/code&gt;, call it &lt;code&gt;boxPosition&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Instead of &lt;code&gt;num&lt;/code&gt;, call it &lt;code&gt;numBoxes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;prefixes-and-suffixes:c71c34a7bb0db96f87def312ae0a673e&#34;&gt;Prefixes and Suffixes&lt;/h3&gt;

&lt;p&gt;Avoid prefixing or suffixing variables names with the types that they contain.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instead of &lt;code&gt;studentArray&lt;/code&gt; or &lt;code&gt;studentArr&lt;/code&gt;, simply use &lt;code&gt;students&lt;/code&gt; instead.&lt;/li&gt;
&lt;li&gt;Instead of &lt;code&gt;objWallet&lt;/code&gt; or &lt;code&gt;walletObj&lt;/code&gt;, simply use &lt;code&gt;wallet&lt;/code&gt; instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;project-level-consistency:c71c34a7bb0db96f87def312ae0a673e&#34;&gt;Project level consistency&lt;/h3&gt;

&lt;p&gt;There are a number of other naming conventions that you may choose to adopt,
that may not be applicable across different projects.
However, it always makes sense to ensure consistency within an entire project.&lt;/p&gt;

&lt;p&gt;For example, because Javascript does not natively support the concept of private variables,
or support the concept of constants,
many developers adopt conventions such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Private variables&amp;rsquo; names must be preceded with &lt;code&gt;_&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Constants&amp;rsquo; names must be is &lt;strong&gt;ALL_CAPS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These additional naming conventions are not necessary,
but can be beneficial to adopt across the entire project,
in addition to the ones described here.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>