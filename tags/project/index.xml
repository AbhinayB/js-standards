<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project on Javascript Standards</title>
    <link>http://bguiz.github.io/js-standards/tags/project/</link>
    <description>Recent content in Project on Javascript Standards</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 21 Jan 2015 10:34:04 +1100</lastBuildDate>
    <atom:link href="http://bguiz.github.io/js-standards/tags/project/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>AngularJs Folder Structure</title>
      <link>http://bguiz.github.io/js-standards/angularjs/folder-structure/</link>
      <pubDate>Wed, 21 Jan 2015 10:34:04 +1100</pubDate>
      
      <guid>http://bguiz.github.io/js-standards/angularjs/folder-structure/</guid>
      <description>

&lt;h2 id=&#34;feature-centric:97e33aa12ce5e284c569be9193b3b517&#34;&gt;Feature Centric&lt;/h2&gt;

&lt;p&gt;Arrange the project folders such that the top level directories are the names of each feature.
The directory for each feature should contain sub-directories for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;directive&lt;/li&gt;
&lt;li&gt;controller&lt;/li&gt;
&lt;li&gt;view&lt;/li&gt;
&lt;li&gt;service&lt;/li&gt;
&lt;li&gt;factory&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;my-project/
  login/
    login-form-directive.js
    login-form-directive.spec.js
    login-form-directive.html
    login-service.js
    login-service.spec.js
    login-view.html
  todo/
    todo-item-directive.js
    todo-item-directive.html
    todo-item-directive.spec.js
    todo-controller.js
    todo-controller.spec.js
    todo-view.html
  app.js
  index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Organise the source code of your AngularJs project such that they are organised by feature
rather than file type.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do not create folders named &lt;code&gt;controllers&lt;/code&gt;, &lt;code&gt;directives&lt;/code&gt;, et cetera.

&lt;ul&gt;
&lt;li&gt;You can tell what type of file it is by looking at the suffix and extension of the file names&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Instead create folders with the intent to group features

&lt;ul&gt;
&lt;li&gt;When a feature gets too large or complex, requiring many different files,
simply create subfolders for each feature.&lt;/li&gt;
&lt;li&gt;For example, if the login feature, which previously has one directive for &lt;code&gt;form&lt;/code&gt;,
now wants to add a new directive for displaying &lt;code&gt;error&lt;/code&gt;s,
simply create &lt;code&gt;form&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; subfolders within the &lt;code&gt;login&lt;/code&gt; folder,
and move the files accordingly.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;my-project/
  login/
    form/
      login-form-directive.js
      login-form-directive.spec.js
      login-form-directive.html
    error/
      login-error-directive.js
      login-error-directive.spec.js
      login-error-directive.html
    login-service.js
    login-service.spec.js
    login-view.html
  todo/
    todo-item-directive.js
    todo-item-directive.html
    todo-item-directive.spec.js
    todo-controller.js
    todo-controller.spec.js
    todo-view.html
  app.js
  index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The intent here is that files which need each other and are closely related are
the most likely to be colocated with the same folder or in sibling folders.&lt;/p&gt;

&lt;p&gt;If files were organised into folders determined by their type instead,
quite often you find that files need to reference each other by longer paths,
and as a developer, you will often find yourself thinking about
parallel/ equivalent folder paths.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>